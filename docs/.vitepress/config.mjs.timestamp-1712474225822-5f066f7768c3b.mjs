var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// docs/.vitepress/configsidebar/os/openwrt.js
var require_openwrt = __commonJS({
  "docs/.vitepress/configsidebar/os/openwrt.js"() {
  }
});

// docs/.vitepress/configsidebar/os/ubuntu.js
var require_ubuntu = __commonJS({
  "docs/.vitepress/configsidebar/os/ubuntu.js"() {
  }
});

// docs/.vitepress/configsidebar/os/rockylinux.js
var require_rockylinux = __commonJS({
  "docs/.vitepress/configsidebar/os/rockylinux.js"() {
  }
});

// docs/.vitepress/config.mjs
import { defineConfig } from "file:///F:/source_study/instance_collection/node_modules/.pnpm/vitepress@1.0.2_@algolia+client-search@4.23.2_search-insights@2.13.0/node_modules/vitepress/dist/node/index.js";

// docs/.vitepress/confignav/os.js
var os_default = {
  text: "\u64CD\u4F5C\u7CFB\u7EDF",
  items: [
    {
      text: "openwrt",
      link: "/os/openwrt/"
    },
    {
      text: "ubuntu",
      link: "/os/ubuntu/"
    },
    {
      text: "win",
      link: "/os/win/"
    },
    {
      text: "rockylinux",
      link: "/os/rockylinux/"
    }
  ]
};

// docs/.vitepress/confignav/development.js
var development_default = {
  text: "\u7F16\u7A0B\u76F8\u5173",
  items: [
    {
      text: "nvm",
      link: "/development/nvm/"
    },
    {
      text: "\u6570\u636E\u5E93",
      link: "/development/sql/"
    }
  ]
};

// docs/.vitepress/confignav/network.js
var network_default = {
  text: "\u7F51\u7EDC\u76F8\u5173",
  items: [
    {
      text: "zerotier",
      link: "/network/zerotier/"
    },
    {
      text: "frp",
      link: "/network/frp/"
    }
  ]
};

// docs/.vitepress/confignav/maxmodel.js
var maxmodel_default = {
  text: "\u8BED\u8A00\u5927\u6A21\u578B",
  items: [
    {
      text: "chatgpt",
      link: "/maxmodel/chatgpt/"
    },
    {
      text: "claude",
      link: "/maxmodel/claude/"
    },
    {
      text: "gemini",
      link: "/maxmodel/gemini/"
    },
    {
      text: "copilot",
      link: "/maxmodel/copilot/"
    }
  ]
};

// docs/.vitepress/confignav/job.js
var job_default = {
  text: "\u65E5\u5E38\u529E\u516C\u76F8\u5173",
  items: [
    {
      text: "wps",
      link: "/job/wps/"
    }
  ]
};

// docs/.vitepress/confignav/soft.js
var soft_default = {
  text: "\u8F6F\u4EF6\u5B89\u88C5\u4E0E\u914D\u5236",
  items: [
    {
      text: "nginx",
      link: "/soft/nginx/"
    },
    {
      text: "acme\u81EA\u52A8https",
      link: "/soft/acme/"
    },
    {
      text: "remi\u4ED3\u5E93",
      link: "/soft/remi/"
    }
  ]
};

// docs/.vitepress/confignav/index.js
function setNav() {
  return [os_default, development_default, network_default, maxmodel_default, job_default, soft_default];
}

// docs/.vitepress/configsidebar/os/index.js
var import_openwrt = __toESM(require_openwrt());
var import_ubuntu = __toESM(require_ubuntu());

// docs/.vitepress/configsidebar/os/win.js
var win_default = {
  "/os/win/": [{
    text: "win\u76F8\u5173",
    link: "index",
    items: [
      { text: "\u5E38\u7528\u547D\u4EE4", link: "commond" },
      { text: "win\u76F8\u5173\u4EA7\u54C1\u6FC0\u6D3B", link: "activate" },
      { text: "win gost\u5B89\u88C5\u7CFB\u7EDF", link: "gost" }
    ]
  }]
};

// docs/.vitepress/configsidebar/os/index.js
var import_rockylinux = __toESM(require_rockylinux());
var os_default2 = [import_openwrt.default, import_ubuntu.default, win_default, import_rockylinux.default];

// docs/.vitepress/configsidebar/development/nvm.js
var nvm_default = {
  "/development/nvm/": [{
    text: "nvm\uFF08nodejs\u7248\u672C\u7BA1\u7406\uFF09",
    link: "index",
    items: [
      { text: "\u5B89\u88C5", link: "nvm" }
    ]
  }]
};

// docs/.vitepress/configsidebar/development/sql.js
var sql_default = {
  "/development/sql/": [
    {
      text: "mariadb/mysql",
      link: "mysql",
      items: [
        { text: "\u5B89\u88C5", link: "install" }
      ]
    },
    {
      text: "redis",
      link: "redis",
      items: [
        { text: "\u5B89\u88C5", link: "install" }
      ]
    }
  ]
};

// docs/.vitepress/configsidebar/development/index.js
var development_default2 = [nvm_default, sql_default];

// docs/.vitepress/configsidebar/network/zerotier.js
var zerotier_default = {
  "/network/zerotier/": [{
    text: "zerotier\u76F8\u5173\u4FE1\u606F",
    link: "index",
    items: [
      { text: "zerotier\u5B89\u88C5", link: "install" },
      { text: "\u914D\u7F6E moon \u8282\u70B9\u52A0\u901F\u8BBF\u95EE\u901F\u5EA6", link: "moon" }
    ]
  }]
};

// docs/.vitepress/configsidebar/network/frp.js
var frp_default = {
  "/network/frp/": [{
    text: "frp\u76F8\u5173\u4FE1\u606F",
    link: "index",
    items: [
      { text: "frp\u5B89\u88C5", link: "install" },
      { text: "\u914D\u7F6Eserver\u7AEF", link: "server" },
      { text: "\u914D\u7F6Eclient\u7AEF", link: "client" }
    ]
  }]
};

// docs/.vitepress/configsidebar/network/index.js
var network_default2 = [zerotier_default, frp_default];

// docs/.vitepress/configsidebar/maxmodel/chatgpt.js
var chatgpt_default = {
  "/maxmodel/chatgpt/": [{
    text: "chatgpt\u76F8\u5173\u4FE1\u606F",
    link: "index",
    items: [
      { text: "\u63D0\u793A\u8BCD\u6536\u96C6", link: "info" },
      { text: "\u81EA\u7528\u63D0\u793A\u8BCD", link: "own" }
    ]
  }]
};

// docs/.vitepress/configsidebar/maxmodel/claude.js
var claude_default = {
  "/maxmodel/claude/": [{
    text: "claude\u76F8\u5173\u4FE1\u606F",
    link: "index",
    items: [
      { text: "\u81EA\u7528\u63D0\u793A\u8BCD", link: "own" }
    ]
  }]
};

// docs/.vitepress/configsidebar/maxmodel/gemini.js
var gemini_default = {
  "/maxmodel/gemini/": [{
    text: "gemini\u76F8\u5173\u4FE1\u606F",
    link: "index",
    items: [
      { text: "\u81EA\u7528\u63D0\u793A\u8BCD", link: "own" }
    ]
  }]
};

// docs/.vitepress/configsidebar/maxmodel/copilot.js
var copilot_default = {
  "/maxmodel/copilot/": [{
    text: "copilot\u76F8\u5173\u4FE1\u606F",
    link: "index",
    items: [
      { text: "\u81EA\u7528\u63D0\u793A\u8BCD", link: "own" }
    ]
  }]
};

// docs/.vitepress/configsidebar/maxmodel/index.js
var maxmodel_default2 = [chatgpt_default, claude_default, gemini_default, copilot_default];

// docs/.vitepress/configsidebar/soft/nginx.js
var nginx_default = {
  "/soft/nginx/": [{
    text: "nginx\u76F8\u5173",
    link: "index",
    items: [
      { text: "\u5B89\u88C5", link: "install" }
    ]
  }]
};

// docs/.vitepress/configsidebar/soft/acme.js
var acme_default = {
  "/soft/acme/": [{
    text: "acme\u76F8\u5173",
    link: "index",
    items: [
      { text: "\u5B89\u88C5\u4E0E\u4F7F\u7528", link: "install" }
    ]
  }]
};

// docs/.vitepress/configsidebar/soft/remi.js
var remi_default = {
  "/soft/remi/": [{
    text: "remi\u76F8\u5173",
    link: "index",
    items: [
      { text: "\u5B89\u88C5\u4E0E\u4F7F\u7528", link: "install" }
    ]
  }]
};

// docs/.vitepress/configsidebar/soft/index.js
var soft_default2 = [nginx_default, acme_default, remi_default];

// docs/.vitepress/configsidebar/job/wps.js
var wps_default = {
  "/job/wps/": [{
    text: "wps\u76F8\u5173",
    link: "index",
    items: [
      { text: "\u65F6\u95F4\u6233\u8F6C\u65F6\u95F4", link: "timeto" }
    ]
  }]
};

// docs/.vitepress/configsidebar/job/index.js
var job_default2 = [wps_default];

// docs/.vitepress/configsidebar/index.js
var info = [...os_default2, ...development_default2, ...network_default2, ...maxmodel_default2, ...soft_default2, ...job_default2];
var sidebar = {};
for (const k in info) {
  for (const ks in info[k]) {
    sidebar[ks] = info[k][ks];
  }
}
sidebar["/"] = [];
var pathJoin = (data) => {
  let _sidebar = {};
  for (let k in data) {
    data[k].forEach((e) => {
      e.link = k + e.link;
      if (e.items) {
        let _chpath = e.link.replace(/\/index$/gi, "");
        e.items.forEach((item) => {
          item.link = _chpath + "/" + item.link;
        });
      }
    });
    _sidebar[k] = data[k];
  }
  return _sidebar;
};
var sidebars = pathJoin(sidebar);
function setSidebar() {
  return sidebar;
}

// docs/.vitepress/config.mjs
var config_default = defineConfig({
  title: "\u6536\u96C6\u5F00\u53D1\u7528\u5230\u7684\u76F8\u5173\u5185\u5BB9",
  description: "\u6536\u96C6\u5F00\u53D1\u7528\u5230\u7684\u76F8\u5173\u5185\u5BB9",
  themeConfig: {
    // https://vitepress.dev/reference/default-theme-config
    nav: setNav(),
    sidebar: setSidebar(),
    footer: {
      message: "Released under the MIT License.",
      copyright: "Copyright \xA9 2024-2024 cym findnr"
    },
    lastUpdatedText: "\u6700\u540E\u66F4\u65B0\u65F6\u95F4",
    editLink: {
      pattern: "https://github.com/findnr/instance_collection/blob/main/docs/:path",
      text: "\u7F16\u8F91\u8FD9\u4E2A\u9875\u9762"
    },
    outline: "deep",
    outlineTitle: "\u8FD9\u662F\u6D4F\u89C8\u76EE\u5F55",
    docFooter: {
      prev: "\u4E0A\u4E00\u9875",
      next: "\u4E0B\u4E00\u9875"
    }
  },
  appearance: true,
  lang: "zh-CN",
  lastUpdated: true
});
export {
  config_default as default
};
//# sourceMappingURL=data:application/json;base64,
